import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity

movies_data = {
    'movie_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'title': [
        'Star Wars: Episode IV - A New Hope', 'The Shawshank Redemption', 'Forrest Gump',
        'Inception', 'Pulp Fiction', 'The Matrix', 'Fight Club', 'Goodfellas',
        'The Dark Knight', 'The Lord of the Rings: The Fellowship of the Ring'
    ],
    'genre': [
        'Sci-Fi, Action', 'Drama', 'Drama, Romance',
        'Sci-Fi, Thriller', 'Crime, Drama', 'Sci-Fi, Action', 'Drama, Thriller', 'Crime, Drama',
        'Action, Crime', 'Fantasy, Adventure'
    ],
    'description': [
        'A long time ago in a galaxy far, far away...',
        'Two imprisoned men bond over a number of years...',
        'The presidencies of Kennedy and Johnson, the Vietnam War...',
        'A thief who enters the dreams of others...',
        'The lives of two mob hitmen, a gangster\'s wife...',
        'A computer hacker learns from mysterious rebels...',
        'An insomniac office worker looking for a way to change...',
        'The story of Henry Hill and his life in the mob...',
        'When the menace known as the Joker emerges...',
        'A hobbit embarks on a perilous journey...'
    ]
}
movies_df = pd.DataFrame(movies_data)

ratings_data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5],
    'movie_id': [1, 3, 5, 2, 7, 1, 9, 2, 4, 6, 8, 10, 5],
    'rating': [5, 4, 5, 5, 4, 4, 5, 3, 5, 4, 5, 5, 4]
}
ratings_df = pd.DataFrame(ratings_data)

print("--- Movie Data (Content) ---")
print(movies_df.head())
print("\n--- User Rating Data (Collaborative) ---")
print(ratings_df.head())
print("-" * 50)


movies_df['combined_features'] = movies_df['genre'] + \
    ' ' + movies_df['description']
# --- 2. CONTENT-BASED FILTERING ---
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies_df['combined_features'])

# Compute the cosine similarity matrix
cosine_sim_content = linear_kernel(tfidf_matrix, tfidf_matrix)

# Create a mapping from movie title to its index
indices = pd.Series(
    movies_df.index, index=movies_df['title']).drop_duplicates()


def get_content_based_recommendations(title, cosine_sim=cosine_sim_content, df=movies_df, indices=indices):
    """
    Generates content-based recommendations for a given movie title.
    """
    if title not in indices:
        return f"'{title}' not found in the dataset. Please try a different movie."

    idx = indices[title]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 5 most similar movies
    sim_scores = sim_scores[1:6]  # Exclude the movie itself

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 5 most similar movies
    return df['title'].iloc[movie_indices]


print("\n--- Content-Based Recommendations for 'Inception' ---")
print(get_content_based_recommendations('Inception'))
print("-" * 50)


# --- 3. COLLABORATIVE FILTERING ---

# Create a user-item matrix
user_movie_matrix = ratings_df.pivot_table(
    index='user_id', columns='movie_id', values='rating').fillna(0)

# Calculate user similarity (e.g., using cosine similarity)
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(
    user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)


def get_collaborative_recommendations(user_id, user_matrix=user_movie_matrix, user_sim=user_similarity_df):
    """
    Generates collaborative filtering recommendations for a given user.
    """
    # Get the top 3 most similar users
    similar_users = user_sim[user_id].sort_values(ascending=False).index[1:4]

    # Find movies rated by these similar users
    similar_users_movies = user_matrix.loc[similar_users]

    # Get movies that the target user has not yet rated
    user_rated_movies = user_matrix.loc[user_id]
    unrated_movies = user_rated_movies[user_rated_movies == 0].index

    # Calculate an average rating for the unrated movies from similar users
    recommendations = similar_users_movies[unrated_movies].mean(
    ).sort_values(ascending=False)

    # Get top 5 recommendations
    top_5_movie_ids = recommendations.head(5).index.tolist()

    return movies_df[movies_df['movie_id'].isin(top_5_movie_ids)]['title']


print("\n--- Collaborative Recommendations for User 1 ---")
print(get_collaborative_recommendations(1))
print("-" * 50)


# --- 4. HYBRID RECOMMENDATION SYSTEM ---

def get_hybrid_recommendations(user_id, content_based_movie, n_recommendations=5):
    """
    Generates hybrid recommendations by combining both methods.
    """
    # Get recommendations from both methods
    content_recs = get_content_based_recommendations(
        content_based_movie).tolist()
    collab_recs = get_collaborative_recommendations(user_id).tolist()

    # Combine and remove duplicates
    hybrid_recs = list(set(content_recs + collab_recs))

    # Return a unique list of recommendations
    return hybrid_recs[:n_recommendations]


print("\n--- Hybrid Recommendations for User 3 (based on 'The Dark Knight') ---")
print(get_hybrid_recommendations(3, 'The Dark Knight'))
print("-" * 50)
